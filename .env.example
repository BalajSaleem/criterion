# ===========================================
# REQUIRED - Core Configuration
# ===========================================

# 1. Generate a random secret: https://generate-secret.vercel.app/32 or run `openssl rand -base64 32`
AUTH_SECRET=

# https://vercel.com/docs/ai-gateway/authentication
# This will be needed to make requests
AI_GATEWAY_API_KEY=


# 2. PostgreSQL database with pgvector extension
# 
# OPTION A - Neon (Recommended - Free tier available)
#   1. Sign up at https://neon.tech
#   2. Create a new project
#   3. Copy the connection string from your project dashboard
#   4. Make sure to enable connection pooling (append ?sslmode=require if not present)
#
# OPTION B - Local PostgreSQL
#   1. Install PostgreSQL locally
#   2. Install pgvector extension: https://github.com/pgvector/pgvector#installation
#   3. Create a database: createdb criterion
#   4. Connection string format: postgresql://user:password@localhost:5432/criterion
#
POSTGRES_URL=

# 3. Google AI API Key (for embeddings - Gemini text-embedding-004)
#   1. Go to https://aistudio.google.com/app/apikey
#   2. Create a new API key This will be needed to embed text for retrieval
#   3. Free tier: 1,500 requests/day (sufficient for development)
GOOGLE_GENERATIVE_AI_API_KEY=

# ===========================================
# OPTIONAL - Local Development
# ===========================================

# Site URL (for SEO metadata, sitemaps, and Open Graph)
# Keep as localhost for local development
# Prod URL = https://criterion.life
NEXT_PUBLIC_SITE_URL=http://localhost:3000

# Redis/KV (OPTIONAL - Only needed for resumable streams feature)
# If you want to test resumable streams locally:
#   1. Sign up for free at https://upstash.com
#   2. Create a Redis database
#   3. Copy the REDIS_URL from your dashboard
# If you don't set this, the app will work fine without resumable streams
# REDIS_URL=

# Blob Storage (OPTIONAL - Only needed for file uploads)
# The app currently doesn't require this feature
# BLOB_READ_WRITE_TOKEN=

# ===========================================
# NOTES FOR CONTRIBUTORS
# ===========================================
#
# What about all those VERCEL_* variables?
# ------------------------------------------
# Those are automatically injected by Vercel when you deploy to production.
# You DON'T need them for local development.
#
# For local development, you only need the 3 REQUIRED variables above.
# The app will work perfectly fine without all the Vercel-specific vars.
#
# XAI (Grok) API Access
# ---------------------
# This project uses XAI Grok models via Vercel AI Gateway, which requires
# a Vercel account. For local development without Vercel:
# 
# OPTION A: Deploy to your own Vercel account (free tier)
#   1. Fork this repo
#   2. Deploy to Vercel (vercel.com)
#   3. Connect your own Neon database (free tier available)
#   4. Add GOOGLE_GENERATIVE_AI_API_KEY to Vercel environment variables
#   5. Vercel will automatically configure AI Gateway access
#   6. Use `vercel env pull` to get all env vars locally
#
# OPTION B: Use a different model provider
#   1. Edit lib/ai/providers.ts to use OpenAI, Anthropic, etc.
#   2. Add the respective API key to this file (e.g., OPENAI_API_KEY)
#   3. Update the model references in lib/ai/index.ts
#
# We recommend Option A for the best experience with Grok models.

# ===========================================
# DEPRECATED - No Longer Used
# ===========================================

# OPENAI_API_KEY= # Replaced by XAI Grok via Vercel AI Gateway
